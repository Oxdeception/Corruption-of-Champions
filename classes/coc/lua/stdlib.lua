---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aimozg.
--- DateTime: 17.06.2018 0:07
---

--- Flash interop

-- we declare flat vars to avoid using . operator when overriding __index
local flash_asnumber = flash.asnumber
local flash_asstring = flash.asstring
local builtins_null = builtins.null
local builtins_equals = builtins.equals
local builtins_typeof = builtins.typeof

---@return Lua typename or "flash_"+(Flash typename)
function typeof(fl)
    local t = type(fl)
    if t == 'userdata' then
        return 'flash_' .. flash_asstring(builtins_typeof(builtins,fl))
    else
        return t
    end
end

function flash_equals(a,b)
    return flash_asnumber(builtins_equals(builtins,a,b)) == 1
end
function flash_convert(v)
    local t = typeof(v)
    if t == 'flash_number' then
        return flash_asnumber(v)
    elseif t == 'flash_boolean' then
        return tostring(v) == 'true'
    elseif t == 'flash_string' then
        return flash_asstring(v)
    elseif t == 'flash_undefined' then
        return nil
    elseif t == 'flash_object' then
        if flash_equals(v,builtins_null) then
            return nil
        else
            return v
        end
    else
    -- other possibilities: flash_function, flash_xml, and Lua types
        return v
    end
end

--- Hacking the flash __index metamethod to convert Flash primitives to Lua primitives
flash_metatable = getmetatable(builtins)
if old_flash_index then
    flash_metatable.__index = old_flash_index
else
    old_flash_index = flash_metatable.__index
end
function new_flash_index(table,key)
    return flash_convert(old_flash_index(table,key))
end
flash_metatable.__index = new_flash_index

--- Namespaces implementation

_NAMESPACES = {};
function createNamespace(name, parent)
    if parent == '' or parent == nil then
        parent = _ENV
    elseif type(parent) == 'string' then
        parent = _NAMESPACES[parent]
    end
    local e = setmetatable({}, { __index = parent })
    _NAMESPACES[name] = e
    return e
end
function getNamespace(name)
    return _NAMESPACES[name]
end
function removeNamespace(name)
    _NAMESPACES[name] = nil
end
function checkNamespaceMember(ns, member)
    return _NAMESPACES[ns][member] ~= nil
end
function getNamespaceMember(ns, member)
    return _NAMESPACES[ns][member]
end
function setNamespaceMember(ns, member, value)
    _NAMESPACES[ns][member] = value
end
setmetatable(_NAMESPACES, {
    __index = function(table, key)
        return createNamespace(key, _ENV)
    end
})