default namespace = "xxc-story2"

start = mod
# mod structure
mod = element mod {
    attribute name { text },
    attribute version { text }?,
    import*,
    state?,
#    export*,
    exportable*
}
import = element import {
    attribute ref { text }
}
state = element state {
    var*
}
var = element var {
    attribute name { text },
    (text | empty)
}
#export = element export {
#    attribute ref { text }
#}
exportable = lib | Text | scene
lib = element lib {
    attribute name { text },
    exportable*
}
Text = element text {
    attribute name { text },
    content*
}
scene = element scene {
    attribute name { text },
    content*
}

# content
content =
    text | b | i | font | if | switch # | xcc-content
b = element b { content* }
i = element i { content* }
font = element font {
    attribute color { text }?,
    content*
}
#xcc-named-content = Text | String | lib | story | macro | extend-story | zone | extend-zone
#xcc-content = xcc-named-content | display | dynStats | output | Include | set
#namedBlock = attribute name { text }?, content*
#String = element string { namedBlock }
#set = element set {
#    attribute var { text },
#    attribute value { expression }?,
#    attribute op { 'append' | 'set' | 'add' | "+=" | '=' }?,
#    text*
#}
#extend-story = element extend-story { namedBlock }
#zone = element zone {
#    namedBlock,
#    encounter*
#}
#extend-zone = element extend-zone {
#    namedBlock,
#    encounter*
#}
#encounter = element encounter {
#    attribute name { text },
#    attribute chance { expression }?,
#    attribute when { expression }?,
#    content*
#}
#display = element display {
#    attribute ref { text },
#    empty
#}
#dynStats = element dynStats {
#    attribute str { expression }?,
#    attribute tou { expression }?,
#    attribute spe { expression }?,
#    attribute int { expression }?,
#    attribute lib { expression }?,
#    attribute sen { expression }?,
#    attribute lus { expression }?,
#    attribute cor { expression }?,
#    attribute scale { expression }?,
#    empty
#}
#output = element output { expression }
#Include = element include {
#    attribute path { text },
#    attribute required { "true" | "false" }?,
#    empty
#}

# xlogic
expression = text
array-content-expression = text
if = element if {
    attribute test { expression },
    (if-big | if-short)
}
if-big = (
    content*,
    elseif*,
    else?
)
if-short = (
    empty,
    attribute then { text },
    attribute else { text }?
)
elseif = (
    element elseif {
        attribute test { expression }
    },
    content*
)
else = (
    element else { empty },
    content*
)
switch = element switch {
    attribute value { expression }?,
    case*,
    Default?
}
case = element case {
    attribute test { expression }?,
    attribute value { expression }?,
    attribute values { array-content-expression }?,
    attribute lt { expression }?,
    attribute gt { expression }?,
    attribute ne { expression }?,
    attribute lte { expression }?,
    attribute gte { expression }?,
    content*
}
Default = element default {
    content*
}
